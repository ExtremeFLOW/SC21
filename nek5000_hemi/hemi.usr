c-----------------------------------------------------------------------
c
c  This example illustrates particle tracking being used in a "bubble wire"
c  mode in which particles are periodicly released along a horizontal
c  line segment upstream of a hemispherical roughness element [1,2].  
c
c  PARTICLE TRACKING
c
c  Currently, this is set up to support only a few bubble wires,
c  in order to illustrate basic particle tracking.  
c
c  CONFIGURATION:
c
c  The hemisphere of radius R=0.5 is placed onto a thin cylinder of 
c  radius R and height dz = 0.1R, which is placed onto a smooth 
c  plate. The depth, width and length of the channel are H=6.5R, 
c  B=12.8R and L=36.4R. The boundary conditions (BC) are a Dirichlet 
c  BC as a prescribed Blasius profile at the inlet, outflow BC 
c  at the outlet and stress free symmetry conditions at the lateral 
c  boundaries and at the channel surface.    
c  
c  The Blasius profile is approximated with the following formula: 
c  
c  u = U0 sin ( pi y / 2d )
c  
c  d=1.2R is the boundary layer thickness 
c  U0 =1.0 is the free stream velocity. 
c
c  Suggested Reynolds numbers (Re=UR/nu): Re=100, Re=450, Re=700
c
c  Particles can be plotted with the attached matlab script, "plotit.m"
c
c  A visit script will be provided soon.
c
c
c
c  [1] M.S. Acalar and C.R. Smith, "A study of hairpin vortices in a laminar 
c      boundary layer: Part 1, hairpin vortices generated by a hemisphere 
c      protuberance," J. Fluid Mech. 175, pp. 1-41, 1987
c
c  [2] H.M. Tufo, P.F. Fischer, M.E. Papka and K. Blom, "Numerical simulation 
c      and immersive visualization of hairpin vortices," Proc. of the ACM/IEEE 
c      SC99 Conf. on High Performance Networking and Computing, IEEE Computer Soc.,
c      1999.
c
c
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      real visc_inf
      save visc_inf
      data visc_inf /0/
      integer e,f,eg
      e = gllel(eg)

      udiff =0
      utrans=0

      return
      end
c-----------------------------------------------------------------------
      subroutine set_prof
      include 'SIZE'
      include 'TOTAL'
      common /uprof/ up(lx1,ly1,lz1,lelv)
      integer icalld
      save    icalld
      data    icalld  /0/
      if (icalld.ne.0) return
      icalld = icalld + 1
c     Compute the Blasius profile
      u0   = 1.0
      visc =param(2)

c     delta=param(71)
c     if (delta.eq.0.0) DELTA= 0.58

      rad   = 0.5
      delta = 1.2*rad  ! Thorsten

      re = 1./visc
      hk = 0.55
      uk = blasius_sin(hk,delta,u0)
      rk = uk*hk/visc
      write(6,1) nid,delta,re,rk
    1 format(i6,' Delta,Re,Rek:',1p3e15.4)
      ntot=nx1*ny1*nz1*nelv
      do i=1,ntot
        up(i,1,1,1)=blasius_sin(zm1(i,1,1,1),delta,u0)
      enddo
      return
      end
c-----------------------------------------------------------------------
      function blasius(y,delta,u)
c     Return the velocity at a given y value for specified delta and U.
      integer icalld
      save    icalld
      data    icalld /0/
      dimension u0(45),y0(45),work(45)
      save      u0    ,y0    ,work
      data      u0 / 0.00000 , 0.06641 , 0.13277 , 0.19894 , 0.26471
     $             , 0.32979 , 0.39378 , 0.45627 , 0.51676 , 0.57477
     $             , 0.62977 , 0.68132 , 0.72899 , 0.77246 , 0.81152
     $             , 0.84605 , 0.87609 , 0.90177 , 0.92333 , 0.94112
     $             , 0.95552 , 0.96696 , 0.97587 , 0.98269 , 0.98779
     $             , 0.99155 , 0.99425 , 0.99616 , 0.99748 , 0.99838
     $             , 0.99898 , 0.99937 , 0.99961 , 0.99977 , 0.99987
     $             , 0.99992 , 0.99996 , 0.99998 , 0.99999 , 1.00000
     $             , 1.00000 , 1.00000 , 1.00000 , 1.00000 , 1.00000 /
      if (icalld.eq.0) then
c        Initialize Blasius profile and spline fitting routine.
         icalld=1
         do 10 i=1,45
            y0(i)=float(i-1)/5.0
   10    continue
         call spline(y0,u0,45,work)
      endif
      eta=5.0*y/delta
      if (eta.gt.8.5) then
         blasius=u
      else
         call splint(y0,u0,work,45,eta,vel)
         blasius=vel*u
      endif
      return
      end
c-----------------------------------------------------------------------
      function blasius_sin(y,delta,U)

c     Return the velocity at a given y value for specified delta and U.

      real pi,one
      save pi,one
      data pi,one /0.,1./

      if (pi.eq.0) pi=4*atan(one)

      arg = .5*pi*y/delta
      blasius_sin = sin(arg)

      if (arg.gt.0.5*pi) blasius_sin = 1.

      blasius_sin = U*blasius_sin

      return
      end
c-----------------------------------------------------------------------
      subroutine spline(x,y,n,y2)
      parameter (nmax=100)
      dimension x(n),y(n),y2(n),u(nmax)
      if (n.gt.nmax) then
         write(6,11) n,nmax
   11    FORMAT(2X,'ERROR:  Attempt to fit a spline with',I5
     $            ,'greater than',I4,' points.'
     $       ,/,2X,'Recompile routine SPLINE.')
         call exitti('routine spline fail$',n)
      endif
      y2(1)=0.0
      u(1) =0.0
      do 10 i=2,n-1
         ir=i+1
         il=i-1
         sig=(x(i)-x(il))/(x(ir)-x(il))
         p=sig*y2(il)+2.
         y2(i)=(sig-1.)/p
         u(i)= ( 6.*
     $     ( (y(ir)-y(i))/(x(ir)-x(i))-(y(i)-y(il))/ (x(i)-x(il) ) )
     $            / (x(ir)-x(il))
     $    - sig*u(il) )/p
   10 continue
      qn=0.0
      un=0.0
      y2(n)=(un-qn*u(n-1))/(qn*y2(n-1)+1.)
      do 20 k=n-1,1,-1
         y2(k)=y2(k)*y2(k+1)+u(k)
   20 continue
      return
      end
c-----------------------------------------------------------------------
      subroutine splint(xa,ya,y2a,n,x,y)
c     p. 88-89, numerical recipes
      real xa(n),ya(n),y2a(n)
      klo=1
      khi=n
    1   if ((khi-klo).gt.1) then
           k=(khi+klo)/2
           if (xa(k).gt.x) then
              khi=k
           else
              klo=k
           endif
           goto 1
        endif
      h=xa(khi)-xa(klo)
      if (h.eq.0) then
         write(6,*) xa(khi), 'splint failure',khi
         return
      endif
      a=(xa(khi)-x)/h
      b=(x-xa(klo))/h
      y=a*ya(klo)+b*ya(khi)+
     $  ((a**3-a)*y2a(klo)+(b**3-b)*y2a(khi))*(h**2)/6.
      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,iel)
      include 'SIZE'
      include 'TSTEP'
c     include 'TOTAL'
      include 'NEKUSE'
      ffx = 0.0
      ffy = 0.0
      ffz = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,iel)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      qvol   = 0.0
      source = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'

!      common /rparts/ pts(ldim,lpart),vel(ldim,2:3,lpart)
!      common /iparts/ npart,partid(lpart)
!      integer partid

     
 !     ifto = .true.
 !     if (istep.eq.0.or.mod(istep,iostep).eq.0) 
 !    $   call lambda2(t)   ! Put lambda2 into temperature field


c     NOTE:  The following outpost call coordinates the .f0000 numbering
c            with the particle file numbering.
c
c            This coordination is important when synching frames for a movie.

!      ipstep = iostep ! Particle output coordinated with iostep
!      ipstep = iostep/4

!      ifxyo = .true.
!      if (istep.gt.iostep) ifxyo = .false.
!!      if (istep.eq.0) call outpost(vx,vy,vz,pr,t,'   ') ! Part. coordination
!      call my_particle_generator(ipstep)                ! Particle injection

!      n=nx1*ny1*nz1*nelt
!      umax = glamax(vx,n)
!      vmax = glamax(vy,n)
!      wmin = glmin(vz,n)
!      wmax = glmax(vz,n)
!      wmax = glmax(vz,n)
!      if (nid.eq.0) write(6,1) istep,time,umax,vmax,wmin,wmax
!    1 format(i9,1p5e12.4,' wmax')

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /uprof/ up(lx1,ly1,lz1,lelv)
      integer icalld
      save    icalld
      data    icalld  /0/
      if (icalld.eq.0) call set_prof
      icalld = icalld + 1
      iel = gllel(ieg)
      ux=up(ix,iy,iz,iel)
      uy=0.0
      uz=0.0
      temp=1.0
      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /uprof/ up(lx1,ly1,lz1,lelv)
      integer icalld
      save    icalld
      data    icalld  /0/
      if (icalld.eq.0) call set_prof
      icalld = icalld + 1
      iel = gllel(ieg)
      UX=up(ix,iy,iz,iel)
      UY=0.0
      UZ=0.0
      TEMP=1.0
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
c     param(66) = 4
c     param(67) = 4
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      return
      end
c-----------------------------------------------------------------------

c-----------------------------------------------------------------------
